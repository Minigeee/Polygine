#ifndef SHADER_UI_GEOM
#define SHADER_UI_GEOM "#version 330 core\n\nlayout (points) in;\nlayout (triangle_strip, max_vertices = 4) out;\n\nin vec2 v_position[];\nin float v_rotation[];\nin vec2 v_size[];\nin vec2 v_origin[];\nin vec2 v_texCoord[];\nin vec2 v_texSize[];\nin vec4 v_color[];\nin float v_index[];\n\nout vec2 g_texCoord;\nout vec4 g_color;\n\nuniform vec2 u_targetSize;\nuniform bool u_flippedUv;\n\nconst float PI = 3.1415926535;\n\n\n///////////////////////////////////////////////////////////\nvoid main()\n{\n    // Calculate rotation stuff\n    float c = cos(-v_rotation[0] * PI / 180.0f);\n    float s = sin(-v_rotation[0] * PI / 180.0f);\n\n    vec2 right = vec2(c, s);\n    vec2 up = vec2(-s, c);\n    float l_scale = v_origin[0].x;\n    float r_scale = 1.0f - v_origin[0].x;\n    float t_scale = v_origin[0].y;\n    float b_scale = 1.0f - v_origin[0].y;\n\n    // Get corner vertices\n    vec4 v1 = vec4(v_position[0] - right * v_size[0].x * l_scale - up * v_size[0].y * t_scale, v_index[0], 1.0f);\n    vec4 v2 = vec4(v_position[0] - right * v_size[0].x * l_scale + up * v_size[0].y * b_scale, v_index[0], 1.0f);\n    vec4 v3 = vec4(v_position[0] + right * v_size[0].x * r_scale - up * v_size[0].y * t_scale, v_index[0], 1.0f);\n    vec4 v4 = vec4(v_position[0] + right * v_size[0].x * r_scale + up * v_size[0].y * b_scale, v_index[0], 1.0f);\n    v1.xy /= u_targetSize;\n    v2.xy /= u_targetSize;\n    v3.xy /= u_targetSize;\n    v4.xy /= u_targetSize;\n    v1.y = 1.0f - v1.y;\n    v2.y = 1.0f - v2.y;\n    v3.y = 1.0f - v3.y;\n    v4.y = 1.0f - v4.y;\n    v1.xy = v1.xy * 2.0f - 1.0f;\n    v2.xy = v2.xy * 2.0f - 1.0f;\n    v3.xy = v3.xy * 2.0f - 1.0f;\n    v4.xy = v4.xy * 2.0f - 1.0f;\n\n    // Texture coords\n    vec2 t1 = v_texCoord[0];\n    vec2 t2 = v_texCoord[0] + vec2(0.0f, v_texSize[0].y);\n    vec2 t3 = v_texCoord[0] + vec2(v_texSize[0].x, 0.0f);\n    vec2 t4 = v_texCoord[0] + vec2(v_texSize[0].x, v_texSize[0].y);\n\n    if (u_flippedUv)\n    {\n        vec2 temp = t1;\n        t1 = t2;\n        t2 = temp;\n\n        temp = t3;\n        t3 = t4;\n        t4 = temp;\n    }\n\n    // Emit vertices\n    gl_Position = v1;\n    g_texCoord = t1;\n    g_color = v_color[0];\n    EmitVertex();\n    \n    gl_Position = v2;\n    g_texCoord = t2;\n    EmitVertex();\n    \n    gl_Position = v3;\n    g_texCoord = t3;\n    EmitVertex();\n    \n    gl_Position = v4;\n    g_texCoord = t4;\n    EmitVertex();\n\n    EndPrimitive();\n}"
#endif