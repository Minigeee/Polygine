#ifndef SHADER_DEFAULT_VERT
#define SHADER_DEFAULT_VERT "#version 330 core\n\nlayout (std140) uniform Camera\n{\n    mat4 u_projView;\n    vec3 u_cameraPos;\n    float u_near;\n    float u_far;\n};\n#define MAX_NUM_MATERIALS 4\n#define MAX_NUM_DIR_LIGHTS 2\n#define MAX_NUM_SHADOW_CASCADES 3\n#define MAX_NUM_SHADOW_MAPS MAX_NUM_DIR_LIGHTS * MAX_NUM_SHADOW_CASCADES\n#define MAX_NUM_POINT_LIGHTS 100\n\n\n///////////////////////////////////////////////////////////\nstruct Material\n{\n    vec3 diffuse;\n    vec3 specular;\n    float shininess;\n    float occlusion;\n    float reflectivity;\n    bool hasDiffTexture;\n    bool hasSpecTexture;\n    bool hasNormalTexture;\n};\nlayout (std140) uniform Shadows\n{\n    uniform mat4 u_lightProjViews[MAX_NUM_SHADOW_MAPS];\n    uniform float u_shadowDists[MAX_NUM_SHADOW_MAPS];\n    uniform float u_shadowStrengths[MAX_NUM_DIR_LIGHTS];\n    uniform int u_numShadowCascades[MAX_NUM_DIR_LIGHTS];\n    uniform bool u_shadowsEnabled[MAX_NUM_DIR_LIGHTS];\n};\n\n// Set up shadows in the vertex shader\n\n///////////////////////////////////////////////////////////\n\n#ifndef DEFERRED_SHADING\nout vec4 v_clipSpacePos;\nout vec4 v_lightClipSpacePos[MAX_NUM_SHADOW_MAPS];\n#else\nvec4 v_clipSpacePos;\nvec4 v_lightClipSpacePos[MAX_NUM_SHADOW_MAPS];\n#endif\n\n\n///////////////////////////////////////////////////////////\nvoid calcShadowClipSpace(vec4 worldPos)\n{\n    #ifndef DEFERRED_SHADING\n    v_clipSpacePos = gl_Position;\n    #else\n    v_clipSpacePos = u_projView * worldPos;\n    #endif\n\n    // Calculate light space positions\n    for (int i = 0; i < MAX_NUM_DIR_LIGHTS; ++i)\n    {\n        if (u_shadowsEnabled[i])\n        {\n            int start = i * MAX_NUM_SHADOW_CASCADES;\n            int end = start + MAX_NUM_SHADOW_CASCADES;\n\n            for (int j = start; j < end; ++j)\n                v_lightClipSpacePos[j] = u_lightProjViews[j] * worldPos;\n        }\n    }\n}\n\nlayout (location = 0) in vec3 a_position;\nlayout (location = 1) in vec3 a_normal;\nlayout (location = 2) in vec2 a_texCoord;\nlayout (location = 3) in vec4 a_color;\nlayout (location = 4) in vec3 a_tangent;\nlayout (location = 5) in mat4 a_transform;\n\nout vec3 v_normal;\nout vec2 v_texCoord;\nout vec4 v_color;\nout mat3 v_tbnMatrix;\n\nvoid main()\n{\n    vec4 worldPos = a_transform * vec4(a_position, 1.0);\n    gl_Position = u_projView * worldPos;\n    \n    vec3 T = normalize(vec3(a_transform * vec4(a_tangent, 0.0f)));\n    vec3 N = normalize(vec3(a_transform * vec4(a_normal, 0.0f)));\n    T = normalize(T - dot(T, N) * N);\n    vec3 B = cross(N, T);\n    v_tbnMatrix = mat3(T, B, N);\n\n    v_normal = normalize(mat3(a_transform) * a_normal);\n    v_texCoord = a_texCoord;\n    v_color = a_color;\n\n    // Set up output variables for shadows\n    calcShadowClipSpace(worldPos);\n}"
#endif