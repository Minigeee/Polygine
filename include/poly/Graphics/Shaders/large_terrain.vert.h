#ifndef SHADER_LARGE_TERRAIN_VERT
#define SHADER_LARGE_TERRAIN_VERT "#version 330 core\n\nlayout (std140) uniform Camera\n{\n    mat4 u_projView;\n    vec3 u_cameraPos;\n    float u_near;\n    float u_far;\n};\nuniform vec2 u_cacheMapSize;\nuniform sampler2D u_redirectMap;\n\n\n///////////////////////////////////////////////////////////\nvec3 sampleRedirectData(vec2 uv)\n{\n    return round(texture(u_redirectMap, uv).xyz * 255.0f);\n}\n\n\n///////////////////////////////////////////////////////////\nvec4 sample(sampler2D tex, vec2 uv, vec3 redirect)\n{\n    // Redirect data\n    vec2 cachePos = redirect.xy;\n    float scaleExp = redirect.z;\n\n    // Calculate tile resolution\n    vec2 cacheTexSize = textureSize(tex, 0);\n    float tileRes = cacheTexSize.x / u_cacheMapSize.x;\n\n    // Calculate tile coordinates\n    float tileScale = pow(2.0f, scaleExp);\n    vec2 tileCoords = fract(uv * vec2(textureSize(u_redirectMap, 0)) / tileScale);\n    tileCoords = (tileCoords * (tileRes - 2.0f) + 1.0f) / tileRes;\n\n    // Calculate cache coordinates\n    vec2 cacheCoords = tileRes * (cachePos + tileCoords) / cacheTexSize;\n\n    // Sample cache texture\n    return texture(tex, cacheCoords);\n}\n\n\n///////////////////////////////////////////////////////////\nvec4 sample(sampler2D tex, vec2 uv)\n{\n    return sample(tex, uv, sampleRedirectData(uv));\n}\n\n\n///////////////////////////////////////////////////////////\nvec4 sampleBase(sampler2D tex, vec2 uv)\n{\n    // Base texture should always be at (0, 0) tile\n    vec2 texSize = textureSize(tex, 0);\n    float tileRes = texSize.x / u_cacheMapSize.x;\n    vec2 cacheCoords = (uv * (tileRes - 2.0f) + 1.0f) / texSize;\n\n    // Sample cache texture\n    return texture(tex, cacheCoords);\n}\n\nlayout (location = 0) in vec2 a_vertex;\nlayout (location = 1) in vec4 a_instance;\n\nout vec3 v_fragPos;\nout vec2 v_texCoord;\n\nuniform float u_size;\nuniform float u_maxHeight;\nuniform float u_lodRanges[20];\n\nuniform sampler2D u_heightMap;\n\n\nvoid main()\n{\n    // Calculate position\n    vec3 localPos = vec3(a_vertex.x, 0.0f, a_vertex.y) * a_instance.z;\n    vec4 worldPos = vec4(localPos + vec3(a_instance.x, 0.0f, a_instance.y), 1.0f);\n\n    // Get height\n    v_texCoord = worldPos.xz / u_size + 0.5f;\n    worldPos.y = sampleBase(u_heightMap, v_texCoord).x * u_maxHeight;\n\n    // Geomorph\n    int lod = int(a_instance.w);\n    float sRange = u_lodRanges[lod + 1];\n    float eRange = u_lodRanges[lod];\n    float morphStart = mix(sRange, eRange, 0.8f);\n\n    float d = distance(u_cameraPos, worldPos.xyz);\n    float morphFactor = clamp((d - morphStart) / (eRange - morphStart), 0.0f, 1.0f);\n    vec2 isOdd = fract(a_vertex * 0.5f) * 2.0f;\n    worldPos.xz -= isOdd * a_instance.z * morphFactor;\n\n    // Resample height if morph changed position\n    v_texCoord = worldPos.xz / u_size + 0.5f;\n    worldPos.y = sample(u_heightMap, v_texCoord).x * u_maxHeight;\n\n    // Clip space pos\n    gl_Position = u_projView * worldPos;\n\n    v_fragPos = worldPos.xyz;\n}"
#endif