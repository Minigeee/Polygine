#ifndef SHADER_POSTPROCESS_FXAA_FRAG
#define SHADER_POSTPROCESS_FXAA_FRAG "#version 330 core\n\nuniform sampler2D u_colorTexture; \n\nuniform vec2 u_texelStep;\n\nuniform float u_lumaThreshold;\nfloat u_mulReduce = 1.0f / 8.0f;\nfloat u_minReduce = 1.0f / 128.0f;\nfloat u_maxSpan = 8.0f;\n\nin vec2 v_texCoord;\n\nout vec4 f_color;\n\n// Code from: https://github.com/McNopper/OpenGL/blob/master/Example42/shader/fxaa.frag.glsl\n// http://developer.download.nvidia.com/assets/gamedev/files/sdk/11/FXAA_WhitePaper.pdf\n// http://iryoku.com/aacourse/downloads/09-FXAA-3.11-in-15-Slides.pdf\n// http://horde3d.org/wiki/index.php5?title=Shading_Technique_-_FXAA\n\nvoid main(void)\n{\n    vec3 rgbM = texture(u_colorTexture, v_texCoord).rgb;\n\n	// Sampling neighbour texels. Offsets are adapted to OpenGL texture coordinates. \n	vec3 rgbNW = textureOffset(u_colorTexture, v_texCoord, ivec2(-1, 1)).rgb;\n    vec3 rgbNE = textureOffset(u_colorTexture, v_texCoord, ivec2(1, 1)).rgb;\n    vec3 rgbSW = textureOffset(u_colorTexture, v_texCoord, ivec2(-1, -1)).rgb;\n    vec3 rgbSE = textureOffset(u_colorTexture, v_texCoord, ivec2(1, -1)).rgb;\n\n	// see http://en.wikipedia.org/wiki/Grayscale\n	const vec3 toLuma = vec3(0.299, 0.587, 0.114);\n	\n	// Convert from RGB to luma.\n	float lumaNW = dot(rgbNW, toLuma);\n	float lumaNE = dot(rgbNE, toLuma);\n	float lumaSW = dot(rgbSW, toLuma);\n	float lumaSE = dot(rgbSE, toLuma);\n	float lumaM = dot(rgbM, toLuma);\n\n	// Gather minimum and maximum luma.\n	float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\n	float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\n	\n	// If contrast is lower than a maximum threshold ...\n	if (lumaMax - lumaMin <= lumaMax * u_lumaThreshold)\n	{\n		// ... do no AA and return.\n		f_color = vec4(rgbM, 1.0);\n		\n		return;\n	}  \n	\n	// Sampling is done along the gradient.\n	vec2 samplingDirection;	\n	samplingDirection.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    samplingDirection.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n    \n    // Sampling step distance depends on the luma: The brighter the sampled texels, the smaller the final sampling step direction.\n    // This results, that brighter areas are less blurred/more sharper than dark areas.  \n    float samplingDirectionReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) * 0.25 * u_mulReduce, u_minReduce);\n\n	// Factor for norming the sampling direction plus adding the brightness influence. \n	float minSamplingDirectionFactor = 1.0 / (min(abs(samplingDirection.x), abs(samplingDirection.y)) + samplingDirectionReduce);\n    \n    // Calculate final sampling direction vector by reducing, clamping to a range and finally adapting to the texture size. \n    samplingDirection = clamp(samplingDirection * minSamplingDirectionFactor, vec2(-u_maxSpan), vec2(u_maxSpan)) * u_texelStep;\n	\n	// Inner samples on the tab.\n	vec3 rgbSampleNeg = texture(u_colorTexture, v_texCoord + samplingDirection * (1.0/3.0 - 0.5)).rgb;\n	vec3 rgbSamplePos = texture(u_colorTexture, v_texCoord + samplingDirection * (2.0/3.0 - 0.5)).rgb;\n\n	vec3 rgbTwoTab = (rgbSamplePos + rgbSampleNeg) * 0.5;  \n\n	// Outer samples on the tab.\n	vec3 rgbSampleNegOuter = texture(u_colorTexture, v_texCoord + samplingDirection * (0.0/3.0 - 0.5)).rgb;\n	vec3 rgbSamplePosOuter = texture(u_colorTexture, v_texCoord + samplingDirection * (3.0/3.0 - 0.5)).rgb;\n	\n	vec3 rgbFourTab = (rgbSamplePosOuter + rgbSampleNegOuter) * 0.25 + rgbTwoTab * 0.5;   \n	\n	// Calculate luma for checking against the minimum and maximum value.\n	float lumaFourTab = dot(rgbFourTab, toLuma);\n	\n	// Are outer samples of the tab beyond the edge ... \n	if (lumaFourTab < lumaMin || lumaFourTab > lumaMax)\n	{\n		// ... yes, so use only two samples.\n		f_color = vec4(rgbTwoTab, 1.0); \n	}\n	else\n	{\n		// ... no, so use four samples. \n		f_color = vec4(rgbFourTab, 1.0);\n	}\n}"
#endif