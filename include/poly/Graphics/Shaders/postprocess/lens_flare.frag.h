#ifndef SHADER_POSTPROCESS_LENS_FLARE_FRAG
#define SHADER_POSTPROCESS_LENS_FLARE_FRAG "#version 330 core\n\n///////////////////////////////////////////////////////////\nfloat rand(float c){\n	return fract(sin(c * 12.9898) * 43758.5453);\n}\n\n\n///////////////////////////////////////////////////////////\nfloat rand(vec2 c){\n	return fract(sin(dot(c.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n\n///////////////////////////////////////////////////////////\nvec2 rand2(vec2 st){\n    st = vec2(dot(st, vec2(127.1, 311.7)),\n              dot(st, vec2(269.5, 183.3)));\n    return -1.0 + 2.0 * fract(sin(st) * 43758.5453123);\n}\n\n\n///////////////////////////////////////////////////////////\nvec3 rand3(vec3 st){\n    st = vec3(dot(st, vec3(127.1, 311.7, 285.1)),\n              dot(st, vec3(269.5, 183.3, 161.3)),\n              dot(st, vec3(345.3, 102.9, 245.5)));\n    return -1.0 + 2.0 * fract(sin(st) * 43758.5453123);\n}\n\n\n///////////////////////////////////////////////////////////\nfloat noise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix( mix( dot( rand2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                     dot( rand2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( rand2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                     dot( rand2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\n// Uses code based off of:\n// * https://www.shadertoy.com/view/4sX3Rs\n// * https://github.com/Tomius/LoD\n\n///////////////////////////////////////////////////////////////////////////////\n\nin vec2 v_texCoord;\n\nout vec4 f_color;\n\nuniform sampler2D u_texture;\nuniform vec2 u_screenSize;\nuniform vec2 u_lightPos;\n\nuniform float u_intensity;\nuniform vec3 u_color;\nuniform float u_luminosityFactor;\n\n\n///////////////////////////////////////////////////////////////////////////////\nvec3 lensFlare(vec2 uv, vec2 pos)\n{\n	vec2 uvd = uv * length(uv);\n\n	float f21 = max(0.75f / (1.0f + 32.0f * pow(length(uvd + 0.8f * pos), 2.0f)), 0.0f) * 0.25f;\n	float f22 = max(0.75f / (1.0f + 32.0f * pow(length(uvd + 0.85f * pos), 2.0f)), 0.0f) * 0.23f;\n	float f23 = max(0.75f / (1.0f + 32.0f * pow(length(uvd + 0.9f * pos), 2.0f)), 0.0f) * 0.21f;\n\n	vec2 uvx = mix(uv, uvd, -0.5f);\n	float f41 = max(0.01f - pow(length(uvx + 0.4f * pos), 2.4f), 0.0) * 6.0f;\n	float f42 = max(0.01f - pow(length(uvx + 0.45f * pos), 2.4f), 0.0) * 5.0f;\n	float f43 = max(0.01f - pow(length(uvx + 0.5f * pos), 2.4 ), 0.0f) * 3.0f;\n\n	uvx = mix(uv, uvd, -0.4f);\n	float f51 = max(0.01f - pow(length(uvx + 0.2f * pos), 5.5f), 0.0f) * 2.0f;\n	float f52 = max(0.01f - pow(length(uvx + 0.4f * pos), 5.5f), 0.0f) * 2.0f;\n	float f53 = max(0.01f - pow(length(uvx + 0.6f * pos), 5.5f), 0.0) * 2.0f;\n\n	uvx = mix(uv, uvd, -0.5f);\n	float f61 = max(0.01f - pow(length(uvx - 0.3f * pos), 1.6f), 0.0f) * 6.0f;\n	float f62 = max(0.01f - pow(length(uvx - 0.325f * pos), 1.6f), 0.0f) * 3.0f;\n	float f63 = max(0.01f - pow(length(uvx - 0.35f * pos), 1.6f), 0.0f) * 5.0f;\n\n	vec3 c = vec3(0.0f);\n	c.r += f21 + f41 + f51 + f61;\n	c.g += f22 + f42 + f52 + f62;\n	c.b += f23 + f43 + f53 + f63;\n\n	return 1.25f * c;\n}\n\n\n///////////////////////////////////////////////////////////////////////////////\nvec3 cc(vec3 color, float factor, float factor2)\n{\n	float w = color.x+color.y+color.z;\n	return mix(color,vec3(w)*factor,w*factor2);\n}\n\n\n///////////////////////////////////////////////////////////////////////////////\nvoid main()\n{\n	vec2 uv = v_texCoord - 0.5f;\n	uv.x *= u_screenSize.x / u_screenSize.y;\n  	vec2 lightPos = u_lightPos.xy * 0.5f;\n  	lightPos.x *= u_screenSize.x / u_screenSize.y;\n\n	vec2 lightTexCoord = u_lightPos.xy * 0.5f + 0.5f;\n	vec3 lightFragColor = texture(u_texture, lightTexCoord).rgb;\n	float lightLuminosity = dot(vec3(0.299f, 0.587f, 0.114f), lightFragColor);\n	float luminosityFactor = lightLuminosity * u_luminosityFactor;\n\n    vec3 color = u_color * lensFlare(uv, lightPos) * u_intensity * luminosityFactor;\n	color = cc(color, 0.5f, 0.1f);\n	f_color = texture(u_texture, v_texCoord) + vec4(color, 1.0f);\n}"
#endif