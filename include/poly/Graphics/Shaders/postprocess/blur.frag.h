#ifndef SHADER_POSTPROCESS_BLUR_FRAG
#define SHADER_POSTPROCESS_BLUR_FRAG "#version 330 core\n\n///////////////////////////////////////////////////////////\nfloat rand(float c){\n	return fract(sin(c * 12.9898) * 43758.5453);\n}\n\n\n///////////////////////////////////////////////////////////\nfloat rand(vec2 c){\n	return fract(sin(dot(c.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n\n///////////////////////////////////////////////////////////\nvec2 rand2(vec2 st){\n    st = vec2(dot(st, vec2(127.1, 311.7)),\n              dot(st, vec2(269.5, 183.3)));\n    return -1.0 + 2.0 * fract(sin(st) * 43758.5453123);\n}\n\n\n///////////////////////////////////////////////////////////\nvec3 rand3(vec3 st){\n    st = vec3(dot(st, vec3(127.1, 311.7, 285.1)),\n              dot(st, vec3(269.5, 183.3, 161.3)),\n              dot(st, vec3(345.3, 102.9, 245.5)));\n    return -1.0 + 2.0 * fract(sin(st) * 43758.5453123);\n}\n\n\n///////////////////////////////////////////////////////////\nfloat noise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix( mix( dot( rand2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                     dot( rand2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( rand2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                     dot( rand2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\n///////////////////////////////////////////////////////////////////////////////\n\nin vec2 v_texCoord;\n\nout vec4 f_color;\n\nuniform sampler2D u_texture;\nuniform bool u_verticalBlur;\nuniform int u_kernelSize;\nuniform float u_kernelSpacing;\nuniform float u_noiseFactor;\nuniform float u_weights[50];\n\n///////////////////////////////////////////////////////////////////////////////\n\nvoid main()\n{             \n    vec2 pixelSize = u_kernelSpacing / textureSize(u_texture, 0);\n    vec3 result = texture(u_texture, v_texCoord).rgb * u_weights[0];\n    \n    if (u_verticalBlur)\n    {\n        for (int i = 1; i < u_kernelSize / 2; ++i)\n        {\n            vec2 tc1 = v_texCoord + vec2(0.0, pixelSize.y * i);\n            vec2 tc2 = v_texCoord - vec2(0.0, pixelSize.y * i);\n            tc1.y += (rand(tc1) - 0.5f) * pixelSize.y * u_noiseFactor;\n            tc2.y += (rand(tc2) - 0.5f) * pixelSize.y * u_noiseFactor;\n\n            result += texture(u_texture, tc1).rgb * u_weights[i];\n            result += texture(u_texture, tc2).rgb * u_weights[i];\n        }\n    }\n    else\n    {\n        for (int i = 1; i < u_kernelSize / 2; ++i)\n        {\n            vec2 tc1 = v_texCoord + vec2(pixelSize.x * i, 0.0);\n            vec2 tc2 = v_texCoord - vec2(pixelSize.x * i, 0.0);\n            tc1.x += (rand(tc1) - 0.5f) * pixelSize.x * u_noiseFactor;\n            tc2.x += (rand(tc2) - 0.5f) * pixelSize.x * u_noiseFactor;\n\n            result += texture(u_texture, tc1).rgb * u_weights[i];\n            result += texture(u_texture, tc2).rgb * u_weights[i];\n        }\n    }\n\n    f_color = vec4(result, 1.0);\n}"
#endif