#ifndef SHADER_DEFAULT_FRAG
#define SHADER_DEFAULT_FRAG "#version 330 core\n\n#define MAX_NUM_MATERIALS 4\n#define MAX_NUM_DIR_LIGHTS 2\n#define MAX_NUM_SHADOW_CASCADES 3\n#define MAX_NUM_SHADOW_MAPS MAX_NUM_DIR_LIGHTS * MAX_NUM_SHADOW_CASCADES\n#define MAX_NUM_POINT_LIGHTS 100\n\n\n///////////////////////////////////////////////////////////\nstruct Material\n{\n    vec3 diffuse;\n    vec3 specular;\n    float shininess;\n    float occlusion;\n    float reflectivity;\n    bool hasDiffTexture;\n    bool hasSpecTexture;\n    bool hasNormalTexture;\n};\n\nlayout (location = 0) out vec4 f_normalShininess;\nlayout (location = 1) out vec4 f_albedoOcclusion;\nlayout (location = 2) out vec4 f_specularReflectivity;\n\n\n///////////////////////////////////////////////////////////\nvoid deferred(Material material, vec3 normal)\n{\n    f_normalShininess = vec4(normal, material.shininess);\n    f_albedoOcclusion = vec4(material.diffuse, material.occlusion);\n    f_specularReflectivity = vec4(material.specular, material.reflectivity);\n}\n\n///////////////////////////////////////////////////////////\n\nin vec3 v_normal;\nin vec2 v_texCoord;\nin vec4 v_color;\nin mat3 v_tbnMatrix;\n\nuniform Material u_material;\nuniform sampler2D u_diffuseMap;\nuniform sampler2D u_specularMap;\nuniform sampler2D u_normalMap;\n\n///////////////////////////////////////////////////////////\n\nvoid main()\n{\n    Material material = u_material;\n\n    // Get diffuse color\n    material.diffuse *= v_color.rgb;\n    if (material.hasDiffTexture)\n        material.diffuse *= texture(u_diffuseMap, v_texCoord).rgb;\n\n    // Get specular color\n    if (material.hasSpecTexture)\n        material.specular *= texture(u_specularMap, v_texCoord).rgb;\n\n    // Get normal\n    vec3 normal = v_normal;\n    if (material.hasNormalTexture)\n        normal = normalize(v_tbnMatrix * (texture(u_normalMap, v_texCoord).rgb * 2.0f - 1.0f));\n        \n    deferred(material, normal);\n}"
#endif