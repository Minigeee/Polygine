#ifndef SHADER_PARTICLES_GPU_EXAMPLE_GEOM
#define SHADER_PARTICLES_GPU_EXAMPLE_GEOM "#version 330 core\n\n///////////////////////////////////////////////////////////\nfloat rand(float c){\n	return fract(sin(c * 12.9898) * 43758.5453);\n}\n\n\n///////////////////////////////////////////////////////////\nfloat rand(vec2 c){\n	return fract(sin(dot(c.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n\n///////////////////////////////////////////////////////////\nvec2 rand2(vec2 st){\n    st = vec2(dot(st, vec2(127.1, 311.7)),\n              dot(st, vec2(269.5, 183.3)));\n    return -1.0 + 2.0 * fract(sin(st) * 43758.5453123);\n}\n\n\n///////////////////////////////////////////////////////////\nvec3 rand3(vec3 st){\n    st = vec3(dot(st, vec3(127.1, 311.7, 285.1)),\n              dot(st, vec3(269.5, 183.3, 161.3)),\n              dot(st, vec3(345.3, 102.9, 245.5)));\n    return -1.0 + 2.0 * fract(sin(st) * 43758.5453123);\n}\n\n\n///////////////////////////////////////////////////////////\nfloat noise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix( mix( dot( rand2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                     dot( rand2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( rand2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                     dot( rand2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\nlayout (points) in;\nlayout (points, max_vertices = 10) out;\n\nin vec3 v_position[];\nin float v_rotation[];\nin vec2 v_size[];\nin vec4 v_color[];\nin vec4 v_texRect[];\nin vec3 v_velocity[];\nin float v_age[];\nflat in int v_type[];\n\nout vec3 g_position;\nout float g_rotation;\nout vec2 g_size;\nout vec4 g_color;\nout vec4 g_texRect;\nout vec3 g_velocity;\nout float g_age;\nflat out int g_type;\n\nuniform float u_elapsed;\n\n\n///////////////////////////////////////////////////////////\nvoid main()\n{\n    g_position = v_position[0];\n    g_rotation = v_rotation[0];\n    g_size = v_size[0];\n    g_color = v_color[0];\n    g_texRect = v_texRect[0];\n    g_velocity = v_velocity[0];\n    g_age = v_age[0] + u_elapsed;\n    g_type = v_type[0];\n    \n    if (g_type == 0)\n    {\n        // Create particle to maintain emitter\n        EmitVertex();\n        EndPrimitive();\n\n        // Create another particle\n        g_velocity.xz = rand2(vec2(g_age, 2.0f * g_age)) * 0.8f - 0.4f;\n        g_age = 0.0f;\n        g_type = 1;\n\n        EmitVertex();\n        EndPrimitive();\n    }\n    else\n    {\n        if (g_age > 3.0f)\n            return;\n\n        // Update position\n        g_velocity.y += 9.8f * u_elapsed;\n        g_position += g_velocity * u_elapsed;\n\n        EmitVertex();\n        EndPrimitive();\n    }\n\n}"
#endif