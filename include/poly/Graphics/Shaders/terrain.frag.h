#ifndef SHADER_TERRAIN_FRAG
#define SHADER_TERRAIN_FRAG "#version 330 core\n\nlayout (std140) uniform Camera\n{\n    mat4 u_projView;\n    vec3 u_cameraPos;\n    float u_near;\n    float u_far;\n};\n#define MAX_NUM_MATERIALS 4\n#define MAX_NUM_DIR_LIGHTS 2\n#define MAX_NUM_SHADOW_CASCADES 3\n#define MAX_NUM_SHADOW_MAPS MAX_NUM_DIR_LIGHTS * MAX_NUM_SHADOW_CASCADES\n#define MAX_NUM_POINT_LIGHTS 100\n\n\n///////////////////////////////////////////////////////////\nstruct Material\n{\n    vec3 diffuse;\n    vec3 specular;\n    float shininess;\n    float occlusion;\n    float reflectivity;\n    bool hasDiffTexture;\n    bool hasSpecTexture;\n    bool hasNormalTexture;\n};\n\nlayout (location = 0) out vec4 f_normalShininess;\nlayout (location = 1) out vec4 f_albedoOcclusion;\nlayout (location = 2) out vec4 f_specularReflectivity;\n\n\n///////////////////////////////////////////////////////////\nvoid deferred(Material material, vec3 normal)\n{\n    f_normalShininess = vec4(normal, material.shininess);\n    f_albedoOcclusion = vec4(material.diffuse, material.occlusion);\n    f_specularReflectivity = vec4(material.specular, material.reflectivity);\n}\n\n///////////////////////////////////////////////////////////\n\nin vec3 v_fragPos;\nin vec2 v_texCoord;\n\nuniform sampler2D u_normalMap;\n\n///////////////////////////////////////////////////////////\n\nvoid main()\n{\n    vec3 normal = texture(u_normalMap, v_texCoord).xyz;\n    normal.xz = 2.0f * normal.xz - 1.0f;\n    vec3 color = vec3(0.4f, 0.8f, 0.4f);\n\n    // Create terrain material\n    Material material;\n    material.diffuse = color;\n    material.specular = vec3(0.2f);\n    material.shininess = 2.0f;\n    material.occlusion = 1.0f;\n    material.reflectivity = 0.0f;\n    \n    // Output to color buffers\n    deferred(material, normal);\n}"
#endif