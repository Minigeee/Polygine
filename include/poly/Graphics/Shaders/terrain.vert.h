#ifndef SHADER_TERRAIN_VERT
#define SHADER_TERRAIN_VERT "#version 330 core\n\nlayout (std140) uniform Camera\n{\n    mat4 u_projView;\n    vec3 u_cameraPos;\n    float u_near;\n    float u_far;\n};\n///////////////////////////////////////////////////////////\n\nuniform vec4 u_clipPlanes[8];\nuniform int u_numClipPlanes;\n\nfloat gl_ClipDistance[8];\n\n///////////////////////////////////////////////////////////\n\nvoid applyClipPlanes(vec3 pos)\n{\n    for (int i = 0; i < u_numClipPlanes; ++i)\n        gl_ClipDistance[i] = dot(u_clipPlanes[i], vec4(pos, 1.0f));\n}\n\nlayout (location = 0) in vec2 a_vertex;\nlayout (location = 1) in vec4 a_instance;\n\nout vec3 v_fragPos;\nout vec2 v_texCoord;\n\nuniform float u_size;\nuniform float u_maxHeight;\nuniform float u_lodRanges[20];\n\nuniform sampler2D u_heightMap;\n\n\nvoid main()\n{\n    // Calculate position\n    vec3 localPos = vec3(a_vertex.x, 0.0f, a_vertex.y) * a_instance.z;\n    vec4 worldPos = vec4(localPos + vec3(a_instance.x, 0.0f, a_instance.y), 1.0f);\n\n    // Get height\n    v_texCoord = worldPos.xz / u_size + 0.5f;\n    worldPos.y = texture(u_heightMap, v_texCoord).x * u_maxHeight;\n\n    // Geomorph\n    int lod = int(a_instance.w);\n    float sRange = u_lodRanges[lod + 1];\n    float eRange = u_lodRanges[lod];\n    float morphStart = mix(sRange, eRange, 0.8f);\n\n    float d = distance(u_cameraPos, worldPos.xyz);\n    float morphFactor = clamp((d - morphStart) / (eRange - morphStart), 0.0f, 1.0f);\n    vec2 isOdd = fract(a_vertex * 0.5f) * 2.0f;\n    worldPos.xz -= isOdd * a_instance.z * morphFactor;\n\n    // Resample height if morph changed position\n    if (morphFactor > 0.0f)\n    {\n        v_texCoord = worldPos.xz / u_size + 0.5f;\n        worldPos.y = texture(u_heightMap, v_texCoord).x * u_maxHeight;\n    }\n\n    // Clip space pos\n    gl_Position = u_projView * worldPos;\n\n    v_fragPos = worldPos.xyz;\n}"
#endif