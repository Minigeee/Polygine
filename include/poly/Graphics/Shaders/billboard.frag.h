#ifndef SHADER_BILLBOARD_FRAG
#define SHADER_BILLBOARD_FRAG "#version 330 core\n\n#define MAX_NUM_MATERIALS 4\n#define MAX_NUM_DIR_LIGHTS 2\n#define MAX_NUM_SHADOW_CASCADES 3\n#define MAX_NUM_SHADOW_MAPS MAX_NUM_DIR_LIGHTS * MAX_NUM_SHADOW_CASCADES\n#define MAX_NUM_POINT_LIGHTS 100\n\n\n///////////////////////////////////////////////////////////\nstruct Material\n{\n    vec3 diffuse;\n    vec3 specular;\n    float shininess;\n    float occlusion;\n    bool hasDiffTexture;\n    bool hasSpecTexture;\n    bool hasNormalTexture;\n};\n\nlayout (location = 0) out vec4 f_normalShininess;\nlayout (location = 1) out vec4 f_albedoOcclusion;\nlayout (location = 2) out vec3 f_specular;\n\n\n///////////////////////////////////////////////////////////\nvoid output(Material material, vec3 normal)\n{\n    f_normalShininess = vec4(normal, material.shininess);\n    f_albedoOcclusion = vec4(material.diffuse, material.occlusion);\n    f_specular = material.specular;\n}\n\n///////////////////////////////////////////////////////////\n\nin vec3 g_normal;\nin vec2 g_texCoord;\n\nuniform bool u_lightingEnabled;\n\nuniform Material u_materials;\nuniform sampler2D u_diffuseMaps;\nuniform sampler2D u_specularMaps;\nuniform sampler2D u_normalMaps;\n\n\n///////////////////////////////////////////////////////////\nvoid main()\n{\n    Material material = u_materials;\n\n    // Get diffuse color\n    material.diffuse *= v_color.rgb;\n    if (material.hasDiffTexture)\n        material.diffuse *= texture(u_diffuseMap, v_texCoord).rgb;\n\n    // Get specular color\n    if (material.hasSpecTexture)\n        material.specular *= texture(u_specularMap, v_texCoord).rgb;\n        \n    output(material, u_lightingEnabled ? g_normal : vec3(0.0f));\n}"
#endif